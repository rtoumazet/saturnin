//
// exceptions.h
// Saturnin
//
// Copyright (c) 2023 Renaud Toumazet
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file	exceptions.h
///
/// \brief	Declares the various exceptions used in Saturnin.
///
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <stdexcept>
#include <string>

namespace saturnin::exception {

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	CdromError
///
/// \brief	Will be thrown when an error is detected in the cdrom module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class CdromError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	ConfigError
///
/// \brief	Will be thrown when an error is detected in the configuration module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class ConfigError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	GenericError
///
/// \brief	Will be thrown when an error is detected and can't be rattached to any particular module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class GenericError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	GuiError
///
/// \brief	Will be thrown when an error is detected in the graphical user interface module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class GuiError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	MainError
///
/// \brief	Will be thrown when an error is detected in the main module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class MainError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	MemoryError
///
/// \brief	Will be thrown when an error is detected in the memory module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class MemoryError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	Sh2Error
///
/// \brief	Will be thrown when an error is detected in the SH2 module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class Sh2Error : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	ScuError
///
/// \brief	Will be thrown when an error is detected in the SCU module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class ScuError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	Vdp1Error
///
/// \brief	Will be thrown when an error is detected in the VDP1 module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class Vdp1Error : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	Vdp2Error
///
/// \brief	Will be thrown when an error is detected in the VDP2 module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class Vdp2Error : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	OpenglError
///
/// \brief	Will be thrown when an error is detected in the OpenGL module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class OpenglError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	SmpcError
///
/// \brief	Will be thrown when an error is detected in the SMPC module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class SmpcError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	ScspError
///
/// \brief	Will be thrown when an error is detected in the SCSP module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class ScspError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	TextureError
///
/// \brief	Will be thrown when an error is detected in the texture module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class TextureError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	UnimplementedError
///
/// \brief	Will be thrown when an error is detected with an unimplemented feature.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class UnimplementedError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	LogError
///
/// \brief	Will be thrown when an error is detected in the log module.
///
/// \author	Runik
/// \date	01/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class LogError : public std::runtime_error {
    using runtime_error::runtime_error;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	TestError
///
/// \brief	Will be thrown when an error is detected during tests.
///
/// \author	Runik
/// \date	03/03/2023
////////////////////////////////////////////////////////////////////////////////////////////////////

class TestError : public std::runtime_error {
    using runtime_error::runtime_error;
};

} // namespace saturnin::exception
